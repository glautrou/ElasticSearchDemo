@model ElasticSearchDemo.Models.SearchResultModel
@{ ViewData["Title"] = "Home Page"; }

<h1>Search</h1>
<form id="frmSearch" class="clearfix">
    <div class="form-group">
        <label asp-for="SearchTerm">Search term</label>
        <input asp-for="SearchTerm" class="form-control" placeholder="What are you looking for?" />
    </div>
    <button type="submit" class="btn btn-primary float-right">Search</button>
</form>
<hr class="my-4">

<div class="container">
    <div class="row">
        <div class="col-3">
            @if (Model.FilterGroups != null && Model.FilterGroups.Any())
            {
                foreach (var filterGroup in Model.FilterGroups)
                {
                    if (filterGroup.Filters != null && filterGroup.Filters.Any())
                    {
                        var selectedItems = new string[] { };
                        switch (filterGroup.Label)
                        {
                            case "Lastname":
                                selectedItems = Model.LastnameFilterValues;
                                break;
                            case "Company":
                                selectedItems = Model.CompanyFilterValues;
                                break;
                            case "Role":
                                selectedItems = Model.RoleFilterValues;
                                break;
                            default:
                                break;
                        }
                        selectedItems = selectedItems ?? new string[] { };

                        <p class="clearfix">
                            <strong>@filterGroup.Label</strong>
                            <ul>
                                @foreach (var filter in filterGroup.Filters)
                                {
                                    var isSelected = selectedItems.Any(i => i == filter.Label);

                                    <li>
                                        <a href="#" class="@(isSelected ? "text-danger" : "")" data-filter-type="@filterGroup.Label" data-filter-value="@filter.Label" data-filter-selected="@(isSelected ? "selected" : "")" >
                                            @filter.Label <span class="badge badge-light">@filter.Count</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </p>
                    }
                }
            }
            else
            {
                <text>No filter available</text>
            }
        </div>
        <div class="col-9">
            <h3>@Model.NbTotalResults @(Model.NbTotalResults > 1 ? "results" : "result")</h3>
            <div style="clear:both;"></div>
            @if (Model.Results != null && Model.Results.Any())
            {
        <table class="table table-bordered table-striped">
            <thead class="thead-light">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Firstname</th>
                    <th scope="col">Lastname</th>
                    <th scope="col">Age</th>
                    <th scope="col">Roles</th>
                    <th scope="col">Company</th>
                    <th scope="col">Bio</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var person in Model.Results)
                {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.Firstname</td>
                    <td>@person.Lastname</td>
                    <td>@person.Age</td>
                    <td>@Html.Raw(string.Join("<br /> ", person.Roles))</td>
                    <td>@person.Company?.Name</td>
                    <td>@Html.Raw(person.Bio)</td>
                </tr>              }
            </tbody>
        </table>

                         }
                                    else
                                    {
                        <text>No result found</text>}
            <div style="clear:both;"></div>
            Page @Model.CurrentPage on @Model.TotalPages (<input asp-for="PageSize" style="width:40px;"/> items per page)

            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-end">
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="#" data-page="@(Model.CurrentPage-1)" tabindex="-1">&lt;</a>
                    </li>

                    @{ List<int> pages;
                        if (Model.CurrentPage == 1)
                        {
                            pages = new List<int>() { Model.CurrentPage, Model.CurrentPage + 1, Model.CurrentPage + 2 };
                        }
                        else if (Model.CurrentPage == Model.TotalPages)
                        {
                            pages = new List<int>() { Model.CurrentPage - 2, Model.CurrentPage - 1, Model.CurrentPage };
                        }
                        else
                        {
                            pages = new List<int>() { Model.CurrentPage - 1, Model.CurrentPage, Model.CurrentPage + 1 };
                        }
                        pages = pages.Where(i => i > 0 && i <= Model.TotalPages).ToList();

                        foreach (var page in pages)
                        {
                <li class="page-item @(Model.CurrentPage == page ? "active" : "")"><a class="page-link" href="#" data-page="@(page)">@(page)</a></li> } }

                    <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" href="#" data-page="@(Model.CurrentPage+1)">&gt;</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        $(function () {

            $('#frmSearch').submit(function (e) {
                search($('#SearchTerm').val(), @Model.CurrentPage, @Model.PageSize, '', '', '');
                e.preventDefault();
                return false;
            });

            $('.page-link').click(function (e) {
                search('@Model.SearchTerm', $(this).attr('data-page'), @Model.PageSize, '', '', '');
                e.preventDefault();
                return false;
            });

            $('#PageSize').blur(function () {
                search('@Model.SearchTerm', @Model.CurrentPage, $('#PageSize').val(), '', '', '');
            });

            $('a[data-filter-type]').click(function (e) {
                var isSelected = $(this).attr('data-filter-selected');
                if (isSelected === 'selected') {
                    //Remove filter
                    location.href = location.href.replace(`${$(this).attr('data-filter-type').toLowerCase()}FilterValues=${$(this).attr('data-filter-value')}`, '');
                }
                else {
                    //Add filter
                    var parameters = {};
                    parameters[$(this).attr('data-filter-type')] = $(this).attr('data-filter-value');
                    search('@Model.SearchTerm', @Model.CurrentPage, @Model.PageSize, parameters.Lastname, parameters.Company, parameters.Role);
                }

                e.preventDefault();
                return false;
            });

        });

        function search(term, page, pageSize, lastnameFilterValue, companyFilterValue, roleFilterValue) {
            var url = `/?term=${term}&page=${page}&pageSize=${pageSize}`;

            var lastnames = [ @Html.Raw(string.Join(", ", Model.LastnameFilterValues != null ? Model.LastnameFilterValues.Select(i=> $"'{i}'") : new string[] { })) ];
            var companies = [ @Html.Raw(string.Join(", ", Model.CompanyFilterValues != null ? Model.CompanyFilterValues.Select(i => $"'{i}'") : new string[] { })) ];
            var roles = [ @Html.Raw(string.Join(", ", Model.RoleFilterValues != null ? Model.RoleFilterValues.Select(i => $"'{i}'") : new string[] { })) ];

            url += getFilterForUrl(lastnames, lastnameFilterValue, 'lastnameFilterValues');
            url += getFilterForUrl(companies, companyFilterValue, 'companyFilterValues');
            url += getFilterForUrl(roles, roleFilterValue, 'roleFilterValues');

            location.href = url;
        }

        function getFilterForUrl(list, item, name) {
            var result = '';

            if (item) {
                list.push(item);
            }

            for (var i = 0; i < list.length; i++) {
                result += `&${name}=${list[i]}`;
            }

            return result;
        }
    </script>
}
